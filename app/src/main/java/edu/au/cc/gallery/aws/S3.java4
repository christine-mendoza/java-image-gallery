package edu.au.cc.gallery.aws;

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CreateBucketConfiguration;
import software.amazon.awssdk.services.s3.model.CreateBucketRequest;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;
import java.io.File;
import java.nio.file.Paths;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.core.sync.RequestBody;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import com.amazonaws.services.s3.model.S3Object;

public class S3 {
    private static final Region region = Region.US_EAST_1;
    private S3Client client;

    public void connect() {
        client = S3Client.builder().region(region).build();
    }

    public void createBucket(String bucketName) {
	CreateBucketRequest createBucketRequest = CreateBucketRequest
	    .builder()
	    .bucket(bucketName)
	    .createBucketConfiguration(CreateBucketConfiguration.builder()
				      // .locationConstraint(region.id())
				       .build())
	    .build();
	client.createBucket(createBucketRequest);
    }

   public void putObject(String bucketName, String key, String value, String contentType) throws Exception {
	PutObjectRequest por = PutObjectRequest.builder()
	    .bucket(bucketName)
	    .key(key)
             .contentEncoding("base64")
             .contentType(contentType)
	    .build();
	client.putObject(por, RequestBody.fromString(value));
    }


  public void deleteObject(String bucketName, String key) {
     DeleteObjectRequest dor = DeleteObjectRequest.builder()
          .bucket(bucketName)
          .key(key)
          .build();
      client.deleteObject(dor);
}
     public String getObject(String bucketName, String key) {
         GetObjectRequest gor = GetObjectRequest.builder()
                 .bucket(bucketName)
                 .key(key)
                 .build();
         try {
             ResponseInputStream<GetObjectResponse> response = client.getObject(gor);
             return new String(response.readAllBytes(), "UTF-8");
         }
         catch (Exception ex) {
             System.out.println("[ERR][S3.getObject()]: " + ex.getMessage());
         }
      return null;

 }
public S3Object getImageFromS3Bucket(String fileName) {
    S3Object object = s3client.getObject(new GetObjectRequest(bucketName, fileName));
    return object;
}

public byte[] getByteArrayFromImageS3Bucket(String fileName) throws IOException {
    InputStream in = getImageFromS3Bucket(fileName).getObjectContent();

    BufferedImage imageFromAWS = ImageIO.read(in);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ImageIO.write(imageFromAWS, "jpg", baos );
    byte[] imageBytes = baos.toByteArray();
    in.close();
    return imageBytes;
 }
    public static void demo() {
	String bucketName = "edu.au.cc.img-gallery-test";
	S3 s3 = new S3();
	s3.connect();
	//s3.createBucket(bucketName);
	//s3.putObject(bucketName, "banana", "yellow");
        s3.deleteObject(bucketName, "banana");
    }

}
